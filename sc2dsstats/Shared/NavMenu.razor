@using sc2dsstats.Data
@using sc2dsstats.Models
@using System.ComponentModel
@inject ScanStateChange _stateChange
@inject StartUp  _startUp
@inject DSreplays _dsdata
@inject DSdyn_filteroptions _options
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">sc2dsstats</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @if (_startUp.FIRSTRUN == false)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="chart">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Charts
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="builds">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Builds
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="scan">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Scan
                </NavLink>
                <div class="@ProgbarClass ml-2" id="div_progbar">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped" role="progressbar"
                             style="width: @((int)Done)%" aria-valuenow=@Done
                             aria-valuemin="0" aria-valuemax="100">
                        </div>
                    </div>
                </div>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="https://www.pax77.org/dsweb/chart" target="_blank">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> World Charts<font size="1">external link</font>
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="https://www.pax77.org/dsmm/mm/" target="_blank">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Find players<font size="1">external link</font>
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="database">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Database
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="bestbuild">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> A-Move Simulator
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="config">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Settings
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="upload">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Upload
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="info">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Info
                </NavLink>
            </li>
            <li>
                <br />
                <div class="btn-group-vertical ml-3">
                    <div class="form-group mr-2">
                        <MatTooltip Tooltip="Autodecodes your replay as soon as your game is finished." Position="@MatTooltipPosition.Right">
                            <div class="custom-control custom-checkbox" @ref="context.Current">
                                <input type="checkbox"
                                       class="custom-control-input"
                                       name="otf"
                                       checked="@OTF"
                                       id="cb_otf"
                                       @onchange="@(() => @Otf())" />
                                <label class="custom-control-label" for="cb_otf">
                                    on the fly scan
                                </label>
                            </div>
                        </MatTooltip>
                    </div>
                    <div class="form-group mr-2">
                        <MatTooltip Tooltip="Fills your database with ~1.5k replay stats (uncheck to switch back to your data)" Position="@MatTooltipPosition.Right">
                            <div class="custom-control custom-checkbox" @ref="@context.Current">
                                <input type="checkbox"
                                       class="custom-control-input"
                                       name="sample"
                                       checked="@_startUp.SAMPLEDATA"
                                       id="cb_sample"
                                       @onchange="@(async() => await Sampledata())" />
                                <label class="custom-control-label" for="cb_sample">
                                    use sample data
                                </label>
                            </div>
                        </MatTooltip>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>
<div class="ml-3">
    <br />
    <br />
    <span class="badge badge-dark">v @StartUp.VERSION</span>
</div>

@code {
    bool collapseNavMenu = true;
    string ProgbarClass = "d-none";
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    double Done = 0;
    bool OTF = false;
    DSotf _otf;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        _otf = new DSotf(_startUp, _dsdata, _stateChange);
        _stateChange.PropertyChanged += Update;
    }

    private async void Update(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            if (_stateChange.Scan.Running == true)
            {
                ProgbarClass = "";
                Done = _stateChange.Scan.Done;
            }
            else
            {
                ProgbarClass = "d-none";
            }
            StateHasChanged();
        });
    }

    void Otf()
    {
        OTF = !OTF;
        if (OTF == true)
        {
            _otf.Start();
        }
        else
        {
            _otf.Stop();
        }
    }

    async Task Sampledata()
    {
        _startUp.SAMPLEDATA = !_startUp.SAMPLEDATA;
        if (_startUp.SAMPLEDATA == true)
        {
            _dsdata.LoadSampleData();
            _options.Player = !_options.Player;
        }
        else
        {
            if (_startUp.Conf.Players.Contains("player"))
                _startUp.Conf.Players.Remove("player");

            await _dsdata.LoadData();
            _options.Player = !_options.Player;
        }
    }

    public void Dispose()
    {
        _stateChange.PropertyChanged -= Update;
    }
}
