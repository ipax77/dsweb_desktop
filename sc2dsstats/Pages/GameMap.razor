@page "/gamemap"
@using System.IO;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using sc2dsstats.Models;

@inject DSdataModel _dsData

<head>
    <style>
        canvas {
            /*background-color: whitesmoke;*/
            background-image: url("images/dsmap.png");
        }
    </style>
</head>
@if (replay.ID != replayid)
{
    <div class="d-none">
        @NewReplay()
    </div>
}

@if (loading == true)
{
    <h4>Loading ...</h4>
}
else if (loadFailed == true)
{
    <h4>Loading replay failed.</h4>
}
<div class="row">
    <div>
        @if (replay != null)
        {
            @foreach (var ent in stSpawns)
            {
                <div class="custom-control custom-checkbox">
                    <input type="checkbox"
                           class="custom-control-input"
                           name="stSpawn"
                           value="@ent.Key"
                           checked="@stSpawns[ent.Key]"
                           id="cb_spawns_@ent.Key"
                           @onchange="@(() => AddSpawn(ent.Key))" />
                    <label class=" custom-control-label" for="cb_spawns_@ent.Key">
                        Spawn @ent.Key
                    </label>
                </div>
            }
            <br />
            @foreach (dsplayer pl in replay.PLAYERS.OrderBy(o => o.REALPOS))
            {
                <div class="custom-control custom-checkbox">
                    <input type="checkbox"
                           class="custom-control-input"
                           name="repPlayers"
                           checked="@stPlayers[pl.REALPOS]"
                           value="@pl.REALPOS"
                           id="cb_@pl.NAME"
                           @onchange="@(() => AddPlayer(pl.REALPOS))" />
                    <label class="custom-control-label" for="cb_@pl.NAME">
                        Player @pl.REALPOS (@pl.NAME)
                    </label>
                </div>
            }
            <br />
            <button class="btn btn-sm btn-primary" @onclick="@(() => ClearCanvas())">Clear</button>
        }
    </div>
    <div>
        <BECanvas Width="1200" Height="1200" @ref="_canvasReference"></BECanvas>
    </div>
</div>




@code {
    [Parameter]
    public dsreplay replay { get; set; }

    int replayid = 0;
    bool loading = true;
    bool loadFailed = false;
    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;

    Dictionary<int, bool> stPlayers = new Dictionary<int, bool>();
    Dictionary<int, bool> stSpawns = new Dictionary<int, bool>();

    static Dictionary<int, string> stColor = new Dictionary<int, string>()
    {
        {0,  "whitesmoke"},
        {1, "blue" },
        {2, "DodgerBlue" },
        {3, "SlateBlue" },
        {4, "green" },
        {5, "MediumSeaGreen" },
        {6, "DarkKhaki" },
        {13, "crimson" },
        {14, "DarkRed" },
        {99, "whitesmoke" }
    };

    protected override async Task OnInitializedAsync()
    {
        replayid = replay.ID;

        for (int i = 0; i <= 10; i++)
        {
            stPlayers.Add(i, false);
        }

        int j = 0;
        int gl = 0;
        while (gl < replay.DURATION) {
            j++;
            stSpawns[j] = false;
            gl += 480 * replay.PLAYERS.Count() / 2;
        }

        await NewReplay();
    }

    async Task AddSpawn(int sp)
    {
        stSpawns[sp] = !stSpawns[sp];

        if (stSpawns[sp] == false)
            await RemoveSpawn(sp);
        else
            await ShowSpawn(sp);
    }

    async Task AddPlayer(int pos)
    {
        stPlayers[pos] = !stPlayers[pos];

        if (stPlayers[pos] == false)
            await RemovePlayer(pos);
        else
            await ShowPlayer(pos);
    }

    async Task RemoveSpawn(int sp)
    {
        await ShowSpawn(sp, true);
    }

    async Task ShowSpawn(int sp, bool Remove = false)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();

        foreach (var ent in stPlayers.Where(x => x.Value == true))
        {
            dsplayer pl = replay.PLAYERS.Where(x => x.REALPOS == ent.Key).FirstOrDefault();
            if (pl != null)
            {
                int pos = pl.REALPOS;
                if (pos > 3) pos -= 3;
                int gameloop = sp * (480 * pos);

                //List<UnitEvent> plUnits = new List<UnitEvent>(replay.UnitsBorn.Where(x => x.PlayerId == pl.POS));
                //List<UnitEvent> plSpUnits = new List<UnitEvent>(plUnits.Where(x => x.Gameloop >= gameloop - 50 && x.Gameloop <= gameloop + 50));


                foreach (var unit in replay.UnitsBorn.Where(x => x.PlayerId == pl.POS && x.Gameloop >= gameloop - 50 && x.Gameloop <= gameloop + 50))
                {
                    int x = MoveX(unit.x);
                    int y = MoveY(unit.y);

                    //x = unit.x * 10;
                    //y = unit.y * 10;

                    string Color = stColor[pl.REALPOS];
                    if (Remove == true)
                        Color = stColor[99];


                    await this._context.SetFillStyleAsync(Color);
                    await this._context.FillRectAsync(x, y, 5, 5);

                    //await this._context.SetFontAsync("8px serif black");
                    //await this._context.StrokeTextAsync(String.Format("{0} {1}|{2}", unit.Name, unit.x, unit.y), x, y);

                    await this._context.SetFillStyleAsync(Color);
                    await this._context.FillTextAsync(String.Format("{0} {1}|{2}", unit.Name, unit.x, unit.y), x, y);

                    if (unit.Died != null)
                    {
                        int dx = MoveX(unit.Died.x);
                        int dy = MoveY(unit.Died.y);

                        //dx = unit.Died.x * 10;
                        //dy = unit.Died.y * 10;

                        string KillColor = stColor[pl.TEAM + 13];
                        if (Remove == true)
                            KillColor = stColor[99];


                        await this._context.SetFillStyleAsync(KillColor);
                        await this._context.FillRectAsync(dx, dy, 5, 5);

                        string killedby = "";
                        //if (unit.Killed != null)
                        //    killedby = " killed by " + unit.Killed.Name + " (p" + unit.Killed.PlayerId + ")";

                        //await this._context.SetFontAsync("8px serif black");
                        //await this._context.StrokeTextAsync(unit.Name + killedby + " " + unit.Died.x + "|" + unit.Died.y, dx, dy);

                        await this._context.SetFillStyleAsync(KillColor);
                        await this._context.FillTextAsync(unit.Name + killedby + " " + unit.Died.x + "|" + unit.Died.y, dx, dy);
                    }
                }
            }
        }
    }

    async Task RemovePlayer(int i)
    {

    }

    async Task ShowPlayer(int i)
    {

    }

    async Task ClearCanvas()
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();

        foreach (var ent in stPlayers.Keys.ToArray())
            stPlayers[ent] = false;

        foreach (var ent in stSpawns.Keys.ToArray())
            stSpawns[ent] = false;

        await this._context.ClearRectAsync(0, 0, 1200, 1200);

    }

    public async Task DrawSpawn(int gameloop)
    {

        this._context = await this._canvasReference.CreateCanvas2DAsync();
        //await this._context.SetFillStyleAsync("green");

        //await this._context.FillRectAsync(10, 100, 100, 100);

        //await this._context.SetFontAsync("48px serif");
        //await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);


        

        if (replay != null)
        {
            foreach (var unit in replay.UnitsBorn.Where(x => x.Gameloop < gameloop && (x.PlayerId == 6 || x.PlayerId == 3)))
            {

                //(int x, int y) = Rotate(MoveX(unit.x), MoveY(unit.y));
                int x = MoveX(unit.x);
                int y = MoveY(unit.y);

                if (unit.PlayerId == 6)
                    await this._context.SetFillStyleAsync("blue");
                else if (unit.PlayerId == 3)
                    await this._context.SetFillStyleAsync("green");

                await this._context.FillRectAsync(x, y, 5, 5);
                //await this._context.SetFillStyleAsync("8px arial");
                await this._context.StrokeTextAsync(String.Format("{0} {1}|{2}", unit.Name, unit.x, unit.y), x, y);

                if (unit.Died != null)
                {
                    int dx = MoveX(unit.Died.x);
                    int dy = MoveY(unit.Died.y);

                    await this._context.SetFillStyleAsync("red");
                    await this._context.FillRectAsync(dx, dy, 5, 5);

                    string killedby = "";
                    if (unit.Killed != null)
                        killedby = " killed by " + unit.Killed.Name + " (p" + unit.Killed.PlayerId + ")";


                    await this._context.StrokeTextAsync(unit.Name + killedby + " " + unit.Died.x + "|" + unit.Died.y, dx, dy);
                }

            }



            StateHasChanged();
        }
    }

    int MoveX(int x)
    {
        x *= 10;
        double rx = 0;
        rx = x + Math.Cos(DegreesToRadians(145)) * 925;

        //if (rx > 550)
        //    rx = rx - 2 * (rx - 550);
        //else if (rx < 550)
        //    rx = rx + 2 * (550 - rx);

        return (int)rx;
    }

    int MoveY(int y)
    {
        y *= 10;
        double ry = 0;
        ry = y - Math.Sin(DegreesToRadians(145)) * 925;
        ry = ry - Math.Sin(DegreesToRadians(180)) * 850;
        //ry -= 100;

        if (ry > 625)
            ry = ry - 2 * (ry - 625);
        else if (ry < 625)
            ry = ry + 2 * (625 - ry);

        return (int)ry;
    }

    (int, int) Rotate(double x, double y)
    {
        double s = Math.Sin(90);
        double c = Math.Cos(90);

        double cx = 600;
        double cy = 600;

        // translate point back to origin:
        x -= cx;
        y -= cy;

        // rotate point
        double xnew = x * c - y * s;
        double ynew = y * s + y * c;

        // translate point back:
        x = xnew + cx;
        y = ynew + cy;
        return ((int)x, (int)y);
    }

    double DegreesToRadians(double degrees)
    {
        return degrees * Math.PI / 180.0;
    }

    async Task NewReplay()
    {
        loading = true;
        loadFailed = false;
        stSpawns.Clear();
        replayid = replay.ID;

        if (replay.PLAYERS.FirstOrDefault().STATS.Count() == 0)
        {
            string reppath = _dsData.ReplayFolder.Where(x => x.Value == replay.REPLAY.Substring(0, 47)).FirstOrDefault().Key;
            reppath += "/" + replay.REPLAY.Substring(48);
            reppath += ".SC2Replay";
            if (File.Exists(reppath))
                await LoadReplay(reppath);
        }
        else
        {
            await DrawSpawn(5024);
        }
        loading = false;
        if (replay.PLAYERS.FirstOrDefault().STATS.Count() == 0)
            loadFailed = true;

        int i = 0;
        int gl = 0;
        while (gl < replay.DURATION) {
            i++;
            stSpawns[i] = false;
            gl += 480 * replay.PLAYERS.Count() / 2;
        }

        StateHasChanged();
    }

    async Task LoadReplay(string file)
    {
        dsreplay myreplay = await Decode.ScanRep(file, _dsData, true);
        if (myreplay == null) return;

        myreplay.ID = replayid;
        int index = _dsData.Replays.FindIndex(x => x.ID == replay.ID);
        _dsData.Replays[index] = myreplay;
        replay = myreplay;

        //await DrawSpawn(5024);
        //StateHasChanged();
    }
}
