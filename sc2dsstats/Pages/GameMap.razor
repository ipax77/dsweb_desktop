@page "/gamemap"
@page "/gamemap/{replayid:int}"
@layout BattleLayout
@using System.IO;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using sc2dsstats.Models;
@using sc2dsstats.Data;
@using pax.s2decode.Models;
@using System.Text.Json;
@using paxgame3.Client.Service;
@using paxgame3.Client.Models;

@inject DSreplays _dsData
@inject IDSdata_cache _dataname;

@if (replay.ID != replayid)
{
    <div class="d-none">
        @NewReplay()
    </div>
}

@if (loading == true)
{
    <h4>Loading ...</h4>
}
else if (loadFailed == true)
{
    <h4>Loading replay failed.</h4>
}
else
{

    <BestBuild plSpawns="plSpawns" Spawns="Spawns" replay="replay" Upgrades="Upgrades" AbilityUpgrades="AbilityUpgrades"/>

}


@code {
    [Parameter]
    public dsreplay replay { get; set; }

    [Parameter]
    public int replayid { get; set; } = 0;


    bool loading = true;
    bool loadFailed = false;

    public Dictionary<int, List<Unit>> Spawns = new Dictionary<int, List<Unit>>();
    public Dictionary<int, HashSet<int>> plSpawns = new Dictionary<int, HashSet<int>>();
    public Dictionary<int, Dictionary<int, List<UnitUpgrade>>> Upgrades = new Dictionary<int, Dictionary<int, List<UnitUpgrade>>>();
    public Dictionary<int, Dictionary<int, List<UnitAbility>>> AbilityUpgrades = new Dictionary<int, Dictionary<int, List<UnitAbility>>>();

    protected override async Task OnInitializedAsync()
    {
        if (replay == null && replayid != 0)
            replay = _dsData.Replays.Where(x => x.ID == replayid).FirstOrDefault();
        else
            replayid = replay.ID;

        await NewReplay();
    }


    async Task NewReplay()
    {
        loading = true;
        loadFailed = false;
        replayid = replay.ID;

        if (replay.PLAYERS.FirstOrDefault().STATS.Count() == 0)
        {
            string reppath = _dsData.ReplayFolder.Where(x => x.Value == replay.REPLAY.Substring(0, 47)).FirstOrDefault().Key;
            reppath += "/" + replay.REPLAY.Substring(48);
            reppath += ".SC2Replay";
            if (File.Exists(reppath))
                await LoadReplay(reppath);
        }
        else
        {
        }

        (Spawns, plSpawns) = BestBuildService.GetUnits(replay, 0);
        Upgrades = BestBuildService.GetUpgrades(replay);
        AbilityUpgrades = BestBuildService.GetAbilityUpgrades(replay);
        loading = false;
        if (replay.PLAYERS.FirstOrDefault().STATS.Count() == 0)
            loadFailed = true;

        StateHasChanged();
    }

    async Task LoadReplay(string file)
    {
        string repid = replay.REPLAY;
        dsreplay myreplay = await Decode.ScanRep(file, _dsData, true);
        if (myreplay == null) return;
        myreplay.REPLAY = repid;
        myreplay.ID = replayid;
        int index = _dsData.Replays.FindIndex(x => x.ID == replay.ID);
        _dsData.Replays[index] = myreplay;
        replay = myreplay;

        //var json = JsonSerializer.Serialize(replay.UnitBorn);
        //File.WriteAllText("/data/unitst2p6.json", json);



        //await DrawSpawn(5024);
        //StateHasChanged();
    }
}
