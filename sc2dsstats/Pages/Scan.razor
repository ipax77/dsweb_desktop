@page "/scan"
@using sc2dsstats.Data
@using System.ComponentModel
@using System.Threading.Tasks
@inject StartUp _startUp
@inject ScanStateChange _stateChange
@inject DSreplays  _DSdata

<h3>Scan</h3>
@if (Scanning == false)
{
    <div class="jumbotron">
        New replays found: @newreplays <br />
        Expected time needed: @(string.Format("{0:0.00}", (_DSdata.Todo.Count * 7.2 / _startUp.Conf.Cores / 60 / 60))) h <br />
        <br />
        You can always quit the process, next time it will continue at the last position. <br />
    </div>
}
else
{
    <div class="jumbotron">
        New replays found: Scanning ... <br />
        Expected time needed: @(string.Format("{0:0.00}", 0)) h <br />
        <br />
        You can always quit the process, next time it will continue at the last position. <br />
    </div>
}
<div class="form-group">
    <label for="sel1">CPU Cores</label>
    <select class="form-control w-auto" id="sel1" @bind="@_startUp.Conf.Cores">
        @for (int i = 1; i <= Environment.ProcessorCount; i++)
        {
            if (i == 2)
            {
                <option selected="selected" value=@i>@i</option>
            }
            else
            {
                <option value=@i>@i</option>
            }
        }
    </select>
</div>
@if (CheckUploadCredential == false)
{
    @if (_stateChange.Scan.Running == false)
    {
        <button class="btn btn-primary mb-2" @onclick="@ScanRepsPre">Scan</button>
    }
    else
    {
        <button class="btn btn-secondary mb-2" @onclick="@Decode.StopIt">Stop</button>
    }
}
else
{
    <div class="w-auto">
        <label>
            To improve this application it would be very nice if the statistics were uploaded from time to time.
            <br />
            All player names (including yours) will be anonymized before sending. By checking you agree that your anonymized DS-replay data will be used at <a href="https://www.pax77.org/dsweb">https://www.pax77.org/dsweb</a> to generate global charts.
            <br />
            You can remove the Upload credential at any time at <a href="config">Config</a>
        </label>
    </div>
    <div class="row mb-2">
        <button class="btn btn-secondary mr-3" @onclick="@AllowUpload">Yes</button>
        <button class="btn btn-primary mr-3" @onclick="@DeclineUpload">No</button>
    </div>
}
<h6>@SCAN</h6>
<h5>@INFO</h5>
<br />
@if (Decode.Failed.Count() > 0)
{
    <div>
        <h4>@Decode.Failed.Count() replays failed decoding</h4>
        Please check on <a href="https://github.com/ipax77/dsweb_desktop">GitHub</a> for an update.
        <br />
        Failed Replays:
        <table class="table table-dark">
            <thead>
                <tr><th>Path</th></tr>
            </thead>
            <tbody>
                @foreach (string rep in Decode.Failed)
                {
                    <tr><td>@rep</td></tr>
                }
            </tbody>
        </table>
    </div>

}



@code {
    string INFO = "";
    string SCAN = "";
    bool CheckUploadCredential = false;
    bool Scanning = true;
    int newreplays = 0;

    protected override async Task OnInitializedAsync()
    {
        if (INFO.Length > 0)
        {
            SCAN = "Decoding replays ...";
            INFO = _stateChange.Scan.Info;
        }

        if (_startUp.Conf.Autoscan == true)
        {
            await ScanReps();
        }
        else
        {
            await FindReps();
        }

        _stateChange.PropertyChanged += Update;
    }

    private async void Update(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            if (_stateChange.Scan.Running == true)
            {
                SCAN = "Decoding replays ..";
                INFO = _stateChange.Scan.Info;
            }
            else
            {
                SCAN = "Jobs done.";
                INFO = _stateChange.Scan.Info;
                INFO += " Elapsed time: " + Decode.Elapsed.ToString("c");
                newreplays = 0;
            }
            StateHasChanged();
        });
    }

    private async Task FindReps()
    {
        Scanning = true;
        StateHasChanged();
        Task scan = Task.Run(() => {
            if (_DSdata.INITdone == false)
            {
                while (_DSdata.INITdone == false)
                    Task.Delay(50);
            } else
            {
                newreplays = _DSdata.NewReplays().GetAwaiter().GetResult();
            }
        });
        await scan.ContinueWith(antecedent => {
            Scanning = false;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });
    }

    async Task ScanReps()
    {
        if (_startUp.SAMPLEDATA == true) _startUp.SAMPLEDATA = false;

        StateHasChanged();
        Task scan = Task.Run(() => {
            if (_DSdata.INITdone == false)
            {
                while (_DSdata.INITdone == false)
                    Task.Delay(50);
            }
            else
            {
                if (Scanning == true)
                {
                }
                else
                {
                    Scanning = true;
                    newreplays = _DSdata.NewReplays().GetAwaiter().GetResult();
                }
            }
        });

        await scan.ContinueWith(antecedent => {
            if (_DSdata.Todo.Count > 0)
            {
                if (_stateChange.Scan.Running == false)
                {
                    _stateChange.Scan.Running = true;
                    SCAN = "Decoding replays ...";
                    Decode.Doit(_DSdata, _stateChange, _startUp, _startUp.Conf.Cores);
                }
                else
                {
                    SCAN = "Scan already running.";
                }
            }
            else
            {
                SCAN = "No new replays found.";
            }
            Scanning = false;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });
    }

    async Task ScanRepsPre()
    {
        if (_startUp.Conf.Uploadcredential == true)
            await ScanReps();
        else
        {
            CheckUploadCredential = true;
            StateHasChanged();
        }
    }

    public async Task AllowUpload()
    {
        _startUp.Conf.Uploadcredential = true;
        _startUp.Save();
        CheckUploadCredential = false;
        StateHasChanged();
        await ScanReps();
    }

    public async Task DeclineUpload()
    {
        CheckUploadCredential = false;
        StateHasChanged();
        await ScanReps();
    }
}
