@page "/gameend"
@page "/gameend/{GameID:double}/{PlayerID:double}"
@using paxgame3.Client.Data
@using paxgame3.Client.Models
@using paxgame3.Client.Service
@using sc2dsstats.Data;
@inject StartUp _startUp
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager
@inject GameChartService _chart
@implements IDisposable

<style>
    canvas {
        background-color: whitesmoke;
    }
</style>
<h3>GameEnd</h3>
    <div class="row">
        <div>
            <div>
                @foreach (var ent in mystats.GetType().GetProperties())
                {
                    @if (ent.Name == "ArmyDiff" || ent.Name == "KillsDiff")
                    {
                        continue;
                    }
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox"
                               class="custom-control-input"
                               name="stProperties"
                               checked="@stProperties[ent.Name]"
                               value=@ent.Name
                               id="cb_@ent.Name"
                               @onchange="@(() => AddDataset(@ent.Name, 0))" />
                        <label class="custom-control-label" for="cb_@ent.Name">
                            @ent.Name
                        </label>
                    </div>
                }

            </div>
            <br />
            <div>
                @foreach (Player pl in _game.Players.OrderBy(o => o.Pos))
                {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox"
                               class="custom-control-input"
                               name="repPlayers"
                               checked="@stPlayers[pl.Pos]"
                               value="@pl.Pos"
                               id="cb_@pl.Name"
                               @onchange="@(() => AddPlayer(pl.Pos))" />
                        <label class="custom-control-label" for="cb_@pl.Name">
                            Player @pl.Pos (@pl.Name)
                        </label>
                    </div>
                }
            </div>
            <br />
            
    <div>
        <div class="custom-control custom-checkbox">
            <input type="checkbox"
                   class="custom-control-input"
                   name="repMiddle"
                   checked="@middleChecked"
                   value="middle"
                   id="cb_middle"
                   @onchange="@(() => ShowMiddle())" />
            <label class=" custom-control-label" for="cb_middle">
                Middle
            </label>
        </div>
    </div>
    <br />
        
        </div>
        <div class="w-75">
            @if (loading == true)
            {
                <h4>Loading ...</h4>
            }
            <canvas id="canvas"></canvas>
        </div>
    </div>
    @if (_game.Stats.Last().MVP.Name != null)
    {
        <h5>MVP</h5>
        <h4>@_game.Stats.Last().MVP.Name</h4>
        <label>Kills</label>
        <span class="badge-info">@_game.Stats.Last().MVP.Kills</span>
        <label>Damage</label>
        <span class="badge-info">@MathF.Round(_game.Stats.Last().MVP.DamageDone, 2)</span>
        <label>Mineral Value Killed</label>
        <span class="badge-info">@_game.Stats.Last().MVP.MineralValueKilled</span>
    }
}

@code {
    [Parameter]
    public GameHistory _game { get; set; }
    [Parameter]
    public Player _player { get; set; }

    [Parameter]
    public double GameID { get; set; }

    [Parameter]
    public double PlayerID { get; set; }

    bool loading = true;
    ChartJS mychart = null;
    bool showChart = false;
    bool middleChecked = false;

    M_stats mystats = new M_stats();
    Dictionary<string, bool> stProperties = new Dictionary<string, bool>();
    Dictionary<string, int> stLabel = new Dictionary<string, int>();
    Dictionary<int, bool> stPlayers = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (!_startUp.Games.ContainsKey(GameID) || !_startUp.Players.ContainsKey(PlayerID))
            NavigationManager.NavigateTo("/ladder");
        else
        {
            _game = _startUp.Games[GameID];
            _player = _startUp.Players[PlayerID];

            _player.inGame = false;
            await _startUp.SavePlayer(_player);
            //await StatsService.GenGlobalStats(_game);

            _player.Units.Clear();

            FinalStat stat = new FinalStat();
            stat.PlayerID = _player.ID;
            stat.Race = _player.Race;
            stat.VsRace = _game.Players.SingleOrDefault(x => x.Pos == 4).Race;
            stat.Mode = _game.Mode.Mode;
            stat.Vs = _game.Mode.Vs;
            stat.Difficulty = _game.Mode.Difficulty;
            stat.Round = _game.Spawns.Count() / _game.Players.Count();
            stat.RoundsWon = _game.Stats.Where(x => x.winner == 1).Count();
            stat.Damage = MathF.Round(_game.Stats.Sum(s => s.Damage[_player.Pos - 1]));
            if (_game.battlefield.Def1.Healthbar == 0)
                stat.Victory = false;
            else if (_game.battlefield.Def2.Healthbar == 0)
                stat.Victory = true;

            _startUp.FinalStats(stat);

            foreach (var ent in mystats.GetType().GetProperties())
                stProperties.Add(ent.Name, false);

            for (int i = 0; i <= 6; i++)
                stPlayers.Add(i, false);

            await NewGame();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showChart == false)
        {
            mychart = await _chart.GetChartBase();
            showChart = true;

        }
    }

    async Task NewGame()
    {

        while (showChart == false)
            await Task.Delay(5);

        mychart.data.labels = Enumerable.Range(1, _game.Spawn - 1).Select(n => "Round " + n.ToString()).ToArray();
        await _chart.DrawChart(mychart);
        for (int i = 0; i < _game.Spawn - 1; i++)
            stLabel[mychart.data.labels[i]] = i + 1;

        await AddPlayer(_player.Pos);
        await AddDataset("ArmyValue", 0);

        loading = false;
    }

    async Task ShowMiddle()
    {
        middleChecked = !middleChecked;

        if (mychart.data.labels == null || mychart.data.labels.Count() == 0)
        {
            mychart = await _chart.GetChartBase();
            mychart.data.labels = Enumerable.Range(1, 10).Select(n => "Round " + n.ToString()).ToArray();
            await _chart.DrawChart(mychart);
            for (int i = 0; i < 10; i++)
                stLabel[mychart.data.labels[i]] = i + 1;

        }

        if (middleChecked == true)
        {
            ChartJSdataset dataset = new ChartJSdataset();
            dataset.label = "Middle";
            List<double> wr = new List<double>();

            Dictionary<int, int> myMid = new Dictionary<int, int>();

            int lastmid = 0;
            int i = 0;
            foreach (var ent in stLabel.Values)
            {
                myMid[ent] = i;
                i++;
            }


            foreach (var dat in myMid)
                wr.Add(dat.Value);

            dataset.data = wr.ToArray();
            mychart = await _chart.AddDataset(dataset);
        }
        else
        {
            mychart = await _chart.RemoveDataset("Middle");
        }
    }

    async Task AddPlayer(int pos)
    {
        stPlayers[pos] = !stPlayers[pos];

        if (stPlayers[pos] == false)
            await RemoveDataset(null, pos);
        else
            await AddDataset(null, pos);
    }

    async Task AddDataset(string opt, int player)
    {
        if (opt != null)
        {
            stProperties[opt] = !stProperties[opt];
            if (stProperties[opt] == false)
            {
                await RemoveDataset(opt, 0);
                return;
            }

            foreach (var ent in stPlayers.Where(x => x.Value == true))
            {
                ChartJSdataset dataset = new ChartJSdataset();
                dataset.label = "Player " + ent.Key + " " + opt;
                List<double> wr = new List<double>();

                Dictionary<int, M_stats> st = _game.Players.Where(x => x.Pos == ent.Key).First().Stats;

                foreach (string label in mychart.data.labels)
                {
                    if (st.ContainsKey(stLabel[label]))
                        wr.Add(Double.Parse(st[stLabel[label]].GetType().GetProperty(opt).GetValue(st[stLabel[label]], null).ToString()));
                    else
                        wr.Add(0);

                    //wr.Add(Double.Parse(ent.Value.GetType().GetProperty(opt).GetValue(ent.Value, null).ToString()));
                    //wr.Add((double)ent.Value.m_scoreValueMineralsUsedActiveForces);
                }

                dataset.data = wr.ToArray();
                mychart = await _chart.AddDataset(dataset);
            }
        }

        if (player > 0)
        {
            foreach (var ent in stProperties.Where(x => x.Value == true))
            {
                ChartJSdataset dataset = new ChartJSdataset();
                dataset.label = "Player " + player + " " + ent.Key;
                List<double> wr = new List<double>();

                //Dictionary<int, M_stats> st = replay.PLAYERS.Where(x => x.REALPOS == player).FirstOrDefault().STATS;
                Dictionary<int, M_stats> st = _game.Players.Where(x => x.Pos == player).First().Stats;

                foreach (var dat in mychart.data.labels)
                {
                    if (st.ContainsKey(stLabel[dat]))
                        wr.Add(Double.Parse(st[stLabel[dat]].GetType().GetProperty(ent.Key).GetValue(st[stLabel[dat]], null).ToString()));
                    else
                        wr.Add(0);

                    //wr.Add(Double.Parse(ent.Value.GetType().GetProperty(opt).GetValue(ent.Value, null).ToString()));
                    //wr.Add((double)ent.Value.m_scoreValueMineralsUsedActiveForces);
                }

                dataset.data = wr.ToArray();
                mychart = await _chart.AddDataset(dataset);
            }

        }
    }

    async Task RemoveDataset(string opt, int player)
    {
        if (opt != null)
            foreach (var ent in mychart.data.datasets.ToList().Where(x => x.label.EndsWith(opt)))
                mychart = await _chart.RemoveDataset(ent.label);

        if (player > 0)
            foreach (var ent in mychart.data.datasets.ToList().Where(x => x.label.StartsWith("Player " + player)))
                mychart = await _chart.RemoveDataset(ent.label);
    }

    public void Dispose()
    {
        if (loading == false)
            _startUp.EndGame(_game);
    }
}
