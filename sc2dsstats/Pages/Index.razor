@page "/"
@using sc2dsstats.Models;
@using sc2dsstats.Interfaces;
@using System.ComponentModel;
@inject StartUp StartUp
@inject DSdataModel DSdata
@inject IDSdata_cache  DScache
@inject ScanStateChange stateChanged
@implements IDisposable

<h1>sc2dsstats</h1>

@if (StartUp.FIRSTRUN == true)
{
    <br />
    <div class="container">
        <h2>Welcome to sc2dsstats - this is your first run, so please check the options and press Save.</h2>
        <h3>You can change the settings at any time at 'Settings' in the Nav menu</h3>
    </div>
    <Config />
}
else
{
    if (DSdata.Replays.Count > 10 && t.Days > 30 && stateChanged.Scan.Running == false)
    {
        <Upload />
    }
    if (Loading == true)
    {
        <a>Loading ..</a>
    }
    else
    {
        if (UpdateAvailable == true)
        {
            <h2>New Version available!</h2>
            <a>@StartUp.UpdateInfo</a>
            <br />
            @if (StartUp.Conf.Autoupdate == false)
            {
                <button class="btn btn-primary" @onclick="@(async () => await UpdateApp())">Update now</button>
            }
            <br />
            if (UpdateRunning == true)
            {
                <h5>The app will restart and install the new version after the download is finished.</h5>
            }
        } else
        {
            <button class="btn btn-primary" @onclick="@(async () => await CheckUpdates())">Check for Updates</button>
            <a>Current version is up to date.</a>
        }
        <Scan />
        <a>@StartUp.FirstRunInfo</a>
    }
}

<!--
<button name="btn_mode" class="btn btn-sm btn-primary" @onclick="@UpdateApp">Update</button>
-->
@code {
    TimeSpan t;
    bool Loading = true;
    bool UpdateAvailable = false;
    bool UpdateRunning = false;

    protected override async Task OnInitializedAsync()
    {
        await StartUp.Init();
        StateHasChanged();
        await DSdata.Init();
        t = DateTime.Now - StartUp.Conf.LastUpload;
        Task.Run(() => { CheckUpdates(); });
        Loading = false;
        stateChanged.PropertyChanged += Update;

    }

    async Task CheckUpdates()
    {
        //Loading = true;
        UpdateAvailable = await StartUp.CheckForUpdate();
        if (UpdateAvailable == true && StartUp.Conf.Autoupdate == true)
            await UpdateApp();

        //Loading = false;
        Update(null, null);
    }

    async Task UpdateApp()
    {
        UpdateRunning = true;
        Update(null, null);
        await StartUp.QuitAndInstall();
    }

    private async void Update(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        stateChanged.PropertyChanged -= Update;
    }

}