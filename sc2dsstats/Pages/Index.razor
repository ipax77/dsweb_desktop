@page "/"
@using sc2dsstats.Data;
@using System.ComponentModel;
@inject StartUp StartUp
@inject DSreplays DSdata
@inject IDSdata_cache  DScache
@inject ScanStateChange stateChanged
@implements IDisposable


<h1>sc2dsstats</h1>

@if (StartUp.FIRSTRUN == true)
{
    <br />
    <div class="container">
        <h2>Welcome to sc2dsstats - this is your first run, so please check the options and press Save.</h2>
        <h3>You can change the settings at any time at 'Settings' in the Nav menu</h3>
    </div>
    <Config />
}
else
{
    if (DSdata.Replays.Count > 10 && t.Days > 30 && stateChanged.Scan.Running == false)
    {
        <Upload />
    }
    if (Loading == true)
    {
        <a>Loading ..</a>
    }
    else
    {
        <Scan />
        @((MarkupString)@StartUp.FirstRunInfo)
    }
}

<div class="jumbotron" style="background-color: darkblue">
    <h4>Update Information</h4>
    A new version is available on <a href="https://github.com/ipax77/sc2dsstats/releases/latest">GitHub</a>
    <br />
    <b>You have to manually install it. This version will be deprecated at some point.</b>
    <br />
    A (very) short desciption video is available on <a href="https://youtu.be/kC9cY-J_W7k">YouTube</a>
    <br />
    It has now the same code base as the website (with a local database). Sadly you will have to rescan all replays, but with the new features it might be worth it ..
</div>


@code {
    TimeSpan t;
    bool Loading = true;


    protected override async Task OnInitializedAsync()
    {
        t = DateTime.Now - StartUp.Conf.LastUpload;
        Loading = false;

        stateChanged.PropertyChanged += Update;
    }


    private void Update(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged()).GetAwaiter();
    }

    public void Dispose()
    {
        stateChanged.PropertyChanged -= Update;
    }
}