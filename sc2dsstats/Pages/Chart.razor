@page "/chart"
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Collections.Specialized
@using System.ComponentModel
@using sc2dsstats.Data
@using sc2dsstats.Models
@inject IComponentContext ComponentContext
@inject ChartService _chart
@inject ChartStateChange chartChanged
@inject DSdyn_filteroptions  _options
@inject BuildsService _build
@inject ScanStateChange _scan
@implements IDisposable

<div id="dv_head" class="container-fluid">
    <div class="row mb-2">
        <div class="btn-group">
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="Winrate")">Winrate</button>
            </div>
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="MVP")">MVP</button>
            </div>
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="DPS")">DPS</button>
            </div>
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="Synergy")">Synergy</button>
            </div>
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="AntiSynergy")">AntiSynergy</button>
            </div>
            <div class="mr-2">
                <button name="btn_mode" class="btn btn-sm btn-primary btn-block" @onclick="@(() => _options.Mode="Timeline")">Timeline</button>
            </div>
        </div>
        <div class="custom-control custom-checkbox mr-2">
            <input type="checkbox" class="custom-control-input" name="cb_player" id="cb_player" @bind="@_options.Player" />
            <label class="custom-control-label" for="cb_player">Player</label>
        </div>
        <div class="custom-control custom-checkbox mr-2">
            <input type="checkbox" class="custom-control-input" name="cb_zero" id="cb_zero" @bind="@_options.BeginAtZero" />
            <label class="custom-control-label" for="cb_zero">BeginatZero</label>
        </div>

    </div>
    <div class="row">
        <div class="btn-group">
            <div class="mr-3">
                <button class="btn-sm btn-light btn-block" @onclick="@ToggleFilter">Filter</button>
            </div>
            <div class="mr-2">
                <button class="btn-sm btn-secondary btn-block" @onclick="@(() => Gametime(1))">This month</button>
            </div>
            <div class="mr-2">
                <button class="btn-sm btn-secondary btn-block" @onclick="@(() => Gametime(2))">Last month</button>
            </div>
            <div class="mr-2">
                <button class="btn-sm btn-secondary btn-block" @onclick="@(() => Gametime(3))">This year</button>
            </div>
            <div class="mr-2">
                <button class="btn-sm btn-secondary btn-block" @onclick="@(() => Gametime(4))">All</button>
            </div>
        </div>
        <div class="mr-2">
        </div>
        <div class="form-group mr-2" style="visibility: @_isLoading">
            <p>Loading ...</p>
        </div>
        <div class="form-group mr-2">
            <span class="badge badge-danger mr-2">
                Total games<br />@_options.fil.CmdrInfo[interest].Games
            </span>
        </div>
        <div class="form-group mr-2">
            <span class="badge badge-danger mr-2">
                Total WR<br />@_options.fil.CmdrInfo[interest].Wr
            </span>
        </div>
        <div class="form-group mr-2">
            <span class="badge badge-danger mr-2">
                Duration<br />@_options.fil.CmdrInfo[interest].Duration
            </span>
        </div>
    </div>
    <div class="@FilterClass" id="div_filter">
        <div class="card card-body">
            <Filter />
        </div>
    </div>
</div>
<div id="dv_btn" class="container-fluid">
    <div class="row">
        <div>
            <div class="alert alert-light">
                <span class="badge badge-dark">@_options.Mode</span>
                <br />
                <span class="badge badge-secondary">@_options.Startdate</span>
                <br />
                <span class="badge badge-secondary">@_options.Enddate</span>
            </div>
            <div>
                @foreach (var ent in DSdata.s_races_cmdr)
                {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox"
                               class="custom-control-input"
                               name="CmdrIcons"
                               value=@ent
                               id="cb_@ent"
                               @onchange="@(() => IconClick(@ent))" />
                        <label class="custom-control-label" for="cb_@ent">
                            <img alt="img_@ent" longdesc="img_@ent" src="@DSdata.GetIcon(@ent)" width="30" height="30" />
                            @ent
                        </label>
                    </div>
                }
            </div>
        </div>
        <!--<div class="chart" style="min-width: 800px !important;  min-height: 600px !important;">-->

        <div class="@CmdrClass w-75" id="chart-wrapper">
            <Cmdrs />
        </div>
        <div class="@ChartClass w-75">
            <canvas id="canvas"></canvas>
        </div>

    </div>

    <div>
        <div class="row">
            <div>
                <div style="width: 400px;">
                    <p>@DSdata.INFO[@_options.Mode]</p>
                </div>
            </div>
            <div>
                <div style="width: 400px; font-size: 12px; overflow: hidden; margin-left: 10px;">
                    <p>@_options.fil.Info()</p>
                </div>
            </div>
            <button class="btn-sm btn-secondary" href="#chart-wrapper" @onclick="@ToggleCmdrs">Cmdrs played</button>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public string info { get; set; }

    private bool chartrendered = false;
    static string chartdata = String.Empty;
    string info2 = "";
    string info3 = "";
    string FilterClass => _options.Filter ? null : "collapse";
    string CmdrClass => cmdrvis ? null : "collapse";
    string ChartClass => cmdrvis ? "collapse" : null;
    private int IconsChecked = 0;
    List<string> cmdricons;
    string interest = "ALL";
    bool cmdrvis = false;
    string _isLoading = "visible";


    private Dictionary<string, bool> IsChecked = new Dictionary<string, bool>();

    void ToggleFilter()
    {
        _options.Filter = !_options.Filter;
    }

    void ToggleCmdrs()
    {
        cmdrvis = !cmdrvis;
        chartChanged.Fil = _options.fil;
        chartChanged.Update = !chartChanged.Update;
    }

    protected override void OnInitialized()
    {
        cmdricons = new List<string>();
        _build.DefaultFilter();
        _options.Build = "ALL";
        if (!_options.fil.CmdrInfo.ContainsKey("ALL")) { _options.fil.CmdrInfo.Add("ALL", new FilHelper(7992, "15:47min", "50%")); }

        foreach (var ent in DSdata.s_races_cmdr)
        {
            IsChecked.Add(ent, false);
        }
        _options.PropertyChanged += OptionChanged;

        _chart.GetChartBase();
        _options.Player = true;
    }

    private async void stateChange(object sender, EventArgs args)
    {
        await InvokeAsync(() => StateHasChanged());
    }


    protected override async Task OnAfterRenderAsync()
    {
        // TEMPORARY: Currently we need this guard to avoid making the interop
        // call during prerendering. Soon this will be unnecessary because we
        // will change OnAfterRenderAsync so that it won't run during the
        // prerendering phase.
        if (!ComponentContext.IsConnected)
        {
            return;
        }

        if (chartrendered == false)
        {
            _chart.GetChartBase();
            chartrendered = true;
            _options.Filter = false;
            _isLoading = "hidden";
        }
    }

    private void Gametime(int i)
    {
        string startdate = "0";
        string enddate = "0";

        DateTime dFirstDayOfThisMonth = DateTime.Today.AddDays(-(DateTime.Today.Day - 1));

        if (i == 1)
        {

            startdate = dFirstDayOfThisMonth.ToString("yyyy-MM-dd");
            enddate = DateTime.Today.ToString("yyyy-MM-dd");
        }
        else if (i == 2)
        {
            DateTime dLastDayOfLastMonth = dFirstDayOfThisMonth.AddDays(-1);
            DateTime dFirstDayOfLastMonth = dFirstDayOfThisMonth.AddMonths(-1);
            startdate = dFirstDayOfLastMonth.ToString("yyyy-MM-dd");
            enddate = dLastDayOfLastMonth.ToString("yyyy-MM-dd");
        }
        else if (i == 3)
        {
            startdate = new DateTime(DateTime.Now.Year, 1, 1).ToString("yyyy-MM-dd");
            enddate = DateTime.Today.ToString("yyyy-MM-dd");
        }
        else if (i == 4)
        {
            startdate = new DateTime(2018, 1, 1).ToString("yyyy-MM-dd");
            enddate = DateTime.Today.ToString("yyyy-MM-dd");
        }

        if (DateTime.Parse(startdate) == _options.Startdate)
        {
            _options.Enddate = DateTime.Parse(enddate);
        }
        else if (DateTime.Parse(enddate) == _options.Enddate)
        {
            _options.Startdate = DateTime.Parse(startdate);
        }
        else
        {
            _options.DOIT = false;
            _options.Startdate = DateTime.Parse(startdate);
            _options.DOIT = true;
            _options.Enddate = DateTime.Parse(enddate);
        }
    }

    private void IconClick(string cmdr)
    {
        _isLoading = "visible";
        IsChecked[cmdr] = !IsChecked[cmdr];

        _options.Icons = IsChecked.Where(x => x.Value == true).ToArray().Count();
        _options.Interest = cmdr;

        if (IsChecked[cmdr] == true)
        {
            cmdricons.Add(cmdr);
            _chart.AddDataset();
        }
        else
        {
            cmdricons.Remove(cmdr);
            _chart.RemoveDataset();
        }

        _options.Icons = cmdricons.Count();

        string activecmdr = "";
        if (cmdricons.Count > 0)
        {
            activecmdr = cmdricons[cmdricons.Count - 1];
            if (_options.fil.CmdrInfo.ContainsKey(activecmdr))
            {
                interest = activecmdr;
            }
        }
        else
        {
            interest = "ALL";
        }
        _isLoading = "hidden";
    }

    private async void OptionChanged(object sender, PropertyChangedEventArgs e)
    {
        if (_options.DOIT == true)
        {
            if (e != null && e.PropertyName != "Interest")
            {
                if (e.PropertyName == "Filter") { StateHasChanged(); }
                else
                {
                    _isLoading = "visible";
                    _chart.RebuildChart();
                    info2 = "";
                    info3 = "Total: " + _options.fil.Total + " WR: " + _options.fil.WR + "%";
                    chartChanged.Fil = _options.fil;
                    chartChanged.Update = !chartChanged.Update;
                    _isLoading = "hidden";
                    await InvokeAsync(() => StateHasChanged());
                }
            }
        }
    }

    public void Dispose()
    {
        _options.PropertyChanged -= OptionChanged;
    }

}
