@page "/config"
@using System.IO
@using sc2dsstats.Models
@using System.Text.Json
@using pax.s2decode.Models;
@inject StartUp  StartUp
@inject DSdataModel _dsData
@inject ScanStateChange stateChange

<h3>Config</h3>
<br />
<button class="btn btn-primary mb-2" @onclick="@Save">Save</button>
<div class="mb-3">
    @if (Failed == true)
    {
        <span class="badge badge-danger">
            Saving failed. Please check your options.
        </span>
        <p>@Error</p>
    }
    else if (Saved == true)
    {
        <span class="badge badge-success">
            Settings successfully saved.
        </span>
    }
</div>
<div>
    <h5>Main directory (for database file, skip file ..)</h5>
    @if (WorkDir.StartsWith("#"))
    {
        <div class="form-group">
            <label for="workdir">
                WorkDir
            </label>
            <input type="text" name="workdir" id="workdir" @bind="WorkDir" class="w-75 alert-danger" />
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="workdir">
                WorkDir
            </label>
            <input type="text" name="workdir" id="workdir" @bind="WorkDir" class="w-75" />
        </div>
    }
</div>
<div>
    <h5>Players - your ingame Starcraft 2 Player name(s) e.g. shown in the loading screen of Direct Strike</h5>
    <div class="container-fluid">
        @for (i = 0; i < Players.Count(); i++)
        {
            var ent = Players[i];
            <div class="form-group">
                <label for="player_@i">
                    Player @i
                </label>
                <input type="text" name="Players" id="player_@i" @bind="ent.Name" class="w-75" />
            </div>
        }
    </div>
    <div>
        <p>
            <button class="btn btn-secondary btn-sm" @onclick="@AddPlayer">+</button>
        </p>
    </div>
</div>
<br />
<div>
    <h5>Replay directories - location of the Direct Strike replays</h5>
    <h6>Somethink like:</h6>
    <h6>C:\Users\username\Documents\StarCraft II\Accounts\107095123\2-S2-1-226321\Replays\Multiplayer</h6>
    <div class="container-fluid">
        @for (i = 0; i < Replays.Count(); i++)
        {
            var ent = Replays[i];
            if (ent.Folder.StartsWith("#"))
            {
                <div class="form-group">
                    <label for="player_@i">
                        Dir @i
                    </label>
                    <input type="text" name="Replays" id="replay_@i" @bind="ent.Folder" class="w-75 alert-danger" />
                </div>

            }
            else
            {
                <div class="form-group">
                    <label for="player_@i">
                        Dir @i
                    </label>
                    <input type="text" name="Replays" id="replay_@i" @bind="ent.Folder" class="w-75" />
                </div>
            }
        }
    </div>
    <div>
        <p>
            <button class="btn btn-secondary btn-sm" @onclick="@AddReplay">+</button>
        </p>
    </div>
</div>
<br />
<h5>Automatisms</h5>
<div class="row">
    <div class="custom-control custom-checkbox w-25">
        <input type="checkbox" class="custom-control-input" name="cb_autosccan" id="cb_autoscan" @bind="@StartUp.Conf.Autoscan" />
        <label class="custom-control-label" for="cb_autoscan">Autoscan</label>
    </div>
    <div class="w-auto">
        <label>Scan for new Replays and Decode them at App start.</label>
    </div>
</div>
<div class="row">
    <div class="custom-control custom-checkbox w-25">
        <input type="checkbox" class="custom-control-input" name="cb_update" id="cb_update" @bind="@StartUp.Conf.Autoupdate" />
        <label class="custom-control-label" for="cb_update">Autoupdate</label>
    </div>
    <div class="w-auto">
        <label>Automatically check for new updates.</label>
    </div>
</div>
<div class="row">
    <div class="custom-control custom-checkbox w-25">
        <input type="checkbox" class="custom-control-input" name="cb_upload" id="cb_upload" @bind="@StartUp.Conf.Autoupload_v1_1_10" />
        <label class="custom-control-label" for="cb_upload">Autoupload</label>
    </div>
    <div class="w-auto">
        <label>Automatically upload your anonymized DS-replay stats.</label>
    </div>
</div>

<br />
<h5>Credentials</h5>
<div class="row">
    <div class="custom-control custom-checkbox w-25">
        <input type="checkbox" class="custom-control-input" name="cb_upload_credential" id="cb_upload_credential" @bind="@StartUp.Conf.Uploadcredential" />
        <label class="custom-control-label" for="cb_upload_credential">Allow Uploads</label>
    </div>
    <div class="w-auto">
        <label>
            To improve this application it would be very nice if the statistics were uploaded from time to time.
            <br />
            All player names (including yours) will be anonymized before sending. By checking you agree that your anonymized DS-replay data will be used at <a href="https://www.pax77.org/dsweb">https://www.pax77.org/dsweb</a> to generate global charts.
        </label>
    </div>
</div>
<!--
<div class="row">
    <div class="custom-control custom-checkbox w-25">
        <input type="checkbox" class="custom-control-input" name="cb_mm_credential" id="cb_mm_credential" @bind="@StartUp.Conf.MMcredential" />
        <label class="custom-control-label" for="cb_mm_credential">Allow Matchmaking</label>
    </div>
    <div class="w-auto">
        <label>
            By using this matchmaking system you agree, that your SC2-username and skill information will be stored to generate the games
            and show rankings on <a href="https://www.pax77.org/dsweb/ladder">https://www.pax77.org/dsweb/ladder</a>.
            <br />
            The data will not be used for any other purpose and will not be disclosed to third parties.
            You can decline to the agreement at any time by unchecking the Credential and delete all data with the Deleteme button.
        </label>
        <button class="btn btn-secondary btn-sm ml-5 mb-3" @onclick="@Deleteme">Deleteme</button>
    </div>
</div>
    -->
<br />
<h5>Data</h5>
<div class="row">
    <div>
        <button class="btn btn-primary" @onclick="@(() => Reset())">Reset data</button>
        <a>Warning: you will have to rescan all replays!</a>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="@(() => Export())">Export data</button>
        <a>Export file will be generated in @Program.workdir export.json</a>
    </div>
</div>
<br />
<div class="form-group">
    <label for="sel1">CPU Cores - used for decoding new replays</label>
    <select class="form-control w-auto" id="sel1" @bind="@StartUp.Conf.Cores">
        @for (int i = 1; i <= Environment.ProcessorCount; i++)
        {
            if (i == @StartUp.Conf.Cores)
            {
                <option selected="selected" value=@i>@i</option>
            }
            else
            {
                <option value=@i>@i</option>
            }
        }
    </select>
</div>
<button class="btn btn-primary" @onclick="@Save">Save</button>
<div class="mb-3">
    @if (Failed == true)
    {
        <span class="badge badge-danger">
            Saving failed. Please check your options.
        </span>
        <p>@Error</p>
    }
    else if (Saved == true)
    {
        <span class="badge badge-success">
            Settings successfully saved.
        </span>
    }
</div>


@code {
    int i;
    int j;
    int k;
    int m;
    bool Failed = false;
    bool Saved = false;
    string WorkDir = "";
    string Error = "";
    HashSet<Player> PlayerChanged = new HashSet<Player>();
    HashSet<Replay> ReplayChanged = new HashSet<Replay>();


    public void Reset()
    {
        if (StartUp.Reset() == true)
            Saved = true;
        else
            Failed = true;

        _dsData.LoadData();
        StateHasChanged();
    }

    public void Export()
    {
        List<string> anonymous = new List<string>();
        foreach (dsreplay replay in _dsData.Replays)
        {
            Dictionary<string, string> plbackup = new Dictionary<string, string>();
            foreach (dsplayer pl in replay.PLAYERS)
            {
                string plname = pl.NAME;
                if (StartUp.Conf.Players.Contains(pl.NAME))
                    pl.NAME = "player";
                else
                    pl.NAME = "player" + pl.REALPOS.ToString();
                plbackup[pl.NAME] = plname;
            }
            anonymous.Add(JsonSerializer.Serialize(replay));

            foreach (dsplayer pl in replay.PLAYERS)
            {
                if (plbackup.ContainsKey(pl.NAME))
                    pl.NAME = plbackup[pl.NAME];
            }
        }
        string exp_csv = Program.workdir + "\\export.json";
        if (!File.Exists(exp_csv))
        {
            File.Delete(exp_csv);
        }
        File.WriteAllLines(exp_csv, anonymous);

        //_dsData.LoadData();
    }

    public class Player
    {
        public string Name { get; set; } = "";
    }
    Dictionary<int, Player> Players;

    public class Replay
    {
        public string Folder { get; set; } = "";
    }
    Dictionary<int, Replay> Replays;

    protected override void OnInitialized()
    {
        WorkDir = StartUp.Conf.WorkDir;
        Players = new Dictionary<int, Player>();
        k = 0;
        foreach (var pl in StartUp.Conf.Players)
        {
            Player mpl = new Player();
            mpl.Name = pl;
            Players.Add(k, mpl);
            k++;
        }
        Players.Add(k, new Player());

        Replays = new Dictionary<int, Replay>();
        m = 0;
        foreach (var fol in StartUp.Conf.Replays)
        {
            Replay rep = new Replay();
            rep.Folder = fol;
            Replays.Add(m, rep);
            m++;
        }
        Replays.Add(m, new Replay());
    }

    void AddPlayer()
    {
        int nk = -1;
        try
        {
            nk = Players.Keys.OrderByDescending(x => x).First();
        }
        catch { }
        Players.Add(nk + 1, new Player());
    }

    void AddReplay()
    {
        int nk = -1;
        try
        {
            nk = Replays.Keys.OrderByDescending(x => x).First();
        }
        catch { }
        Replays.Add(nk + 1, new Replay());
    }

    void Save()
    {
        Failed = false;
        Saved = false;
        Error = "";
        HashSet<string> newPlayers = new HashSet<string>();
        foreach (var pl in Players.Values)
        {
            if (pl.Name.Length > 0)
                newPlayers.Add(pl.Name);
        }
        Players.Clear();
        int l = 0;
        foreach (var pl in newPlayers)
        {
            Player mpl = new Player();
            mpl.Name = pl;
            Players.Add(l, mpl);
            l++;
        }

        HashSet<string> newReplays = new HashSet<string>();
        foreach (var rep in Replays.Values)
        {
            if (Directory.Exists(rep.Folder))
                newReplays.Add(rep.Folder);
            else if (rep.Folder.Length > 0)
            {
                newReplays.Add("# " + rep.Folder);
                Failed = true;
            }
        }
        Replays.Clear();
        l = 0;
        foreach (var fol in newReplays)
        {
            Replay rep = new Replay();
            rep.Folder = fol;
            Replays.Add(l, rep);
            l++;
        }

        if (Directory.Exists(WorkDir))
        {
            StartUp.Conf.WorkDir = WorkDir;
        }
        else
        {
            WorkDir = "# " + WorkDir;
            Failed = true;
        }

        if (newPlayers.Count == 0)
        {
            Failed = true;
            Error = "We need at least one valid Player name. <br />";
        }

        if (newReplays.Count == 0)
        {
            Failed = true;
            Error = "We need at least one valid replay directory. <br />";
        }

        if (StartUp.Conf.Autoupload == true && StartUp.Conf.Uploadcredential == false)
        {
            Failed = true;
            Error = "To Autoupload you need to check Uploadcredetntials, too <br />";
        }

        if (Failed == false)
        {
            Saved = true;
            if (StartUp.FIRSTRUN == true)
            {
                StartUp.FIRSTRUN = false;
                stateChange.Update = !stateChange.Update;
            }

            StartUp.Conf.Players = newPlayers.ToList();
            StartUp.Conf.Replays = newReplays.ToList();

            _dsData.Init();

            StartUp.Save();
        }
    }

    void Deleteme()
    {

    }

}
