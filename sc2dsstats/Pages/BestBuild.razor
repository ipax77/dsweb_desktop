@page "/bestbuild"
@page "/bestbuild/{GameID:long}"
@using System.Numerics
@using paxgamelib.Models
@using paxgamelib.Data
@using paxgamelib.Service
@using System.Collections.Concurrent
@using System.ComponentModel
@using paxgameweb.Data
@using paxgamelib
@inject Refresh _refresh
@inject NavigationManager _nav

@implements IDisposable

<div class="container-fluid">
    <div class="d-flex flex-row flex-wrap" style="background-color: aliceblue; border-radius: 20px; max-width: 1200px !important;">
        <div class="p-2 mt-2 mr-2">
            <label class="col-form-label">Build Race</label>
            <select class="custom-select" @onchange="ChangePlayerRace">
                <option value="@UnitRace.Terran">Terran</option>
                <option value="@UnitRace.Protoss">Protoss</option>
                <option value="@UnitRace.Zerg">Zerg</option>
            </select>
        </div>
        <div class="p-2 mt-2 mr-2">
            <label class="col-form-label">Opponent Race</label>
            <select class="custom-select" @onchange="ChangeOppRace">
                <option value="@UnitRace.Zerg">Zerg</option>
                <option value="@UnitRace.Terran">Terran</option>
                <option value="@UnitRace.Protoss">Protoss</option>
            </select>
        </div>
    </div>
    <div class="d-flex flex-row flex-wrap" style="background-color: aliceblue; border-radius: 20px; max-width: 1200px !important;">
        <div class="p-2 ml-2 mt-2 mr-2">
            <label>Game Mode</label>
            <select class="custom-select" @bind="_player.Mode.Mode">
                <option value="Bot#1">Zerg Bot</option>
                <option value="Bot#2">Terran Bot</option>
                <option value="Bot#3">Random Bot</option>
            </select>
        </div>
        <div class="p-2 mt-2 mr-2">
            <label>Builds</label>
            <input type="number" @bind="@builds" />
        </div>
        <div class="p-2 mt-2 mr-2">
            <label>Positions</label>
            <input type="number" @bind="@positions" />
        </div>
        <div class="p-2 mt-2 mr-2">
            <label>Cores</label>
            <input type="number" @bind="@cores" max="@Environment.ProcessorCount" />
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="row justify-content-start">
        <h5>PaxGame<button class="btn btn-warning ml-5 mr-1" @onclick="@(async () => await StartFight())">Start fight!</button></h5>
        <BuildArea PlayerID="(long)_player.ID" />
        <div style="margin-top: 425px;">
            <h5>Opponent Build<button class="btn btn-sm button-secondary ml-5 mr-1" @onclick="@(() => ShowHideOpp_bool = !ShowHideOpp_bool)">Show/Hide Build</button></h5>
            @if (ShowHideOpp_bool)
            {
                <BuildArea PlayerID="(long)_opp.ID" locked="true" />
            }
        </div>
    </div>
</div>

<div class="container-fluid mt-3 mb-5" style="margin-top: 450px !important;">
    <div>
        @if (BBService.Running == false)
        {
            <button class="btn btn-primary" @onclick="Swap">Swap Player/Opponent</button>
            <button class="btn btn-primary" @onclick="@(() => GenBestBuildPossible())">Get Best Build</button>
            <button class="btn btn-primary" @onclick="@(() => GenBestPositionPossible())">Get Best Position</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="@(() => BBService.StopIt())">Stop Calculating</button>
        }
        <button class="btn btn-primary" @onclick="@(() => StartFight())">Show Fight</button>
        @if (_refreshBB.BestBuild != null && _refreshBB.WorstBuild != null)
        {
            <button class="btn btn-primary" @onclick="@(() => { _opp.SetString(_refreshBB.BestBuild); _refresh.Update = !_refresh.Update; })">Show Best build</button>
            <button class="btn btn-primary" @onclick="@(() => { _opp.SetString(_refreshBB.WorstBuild); _refresh.Update = !_refresh.Update; })">Show Worst build</button>
        }
        @if (_refreshBB.BestStats != null && _refreshBB.BestStatsOpp != null)
        {
            <div style="max-width: 1000px !important;">
                <div class="row">
                    <label class="col">Best Build Mineral Value Killed / Lost</label>
                    <label class="col">Worst Build Mineral Value Killed</label>
                    <label class="col">Done / Total</label>
                    <label class="col">Time</label>
                </div>
                <div class="row">
                    <h4 class="col"><span class="badge badge-success">@_refreshBB.BestStats.MineralValueKilled</span> / <span class="badge badge-danger">@_refreshBB.BestStatsOpp.MineralValueKilled</span></h4>
                    <h4 class="col"><span class="badge badge-danger">@_refreshBB.WorstStats.MineralValueKilled</span></h4>
                    <h4 class="col"><span class="badge badge-info">@_refreshBB.TOTAL_DONE / @_refreshBB.TOTAL</span></h4>
                    @if (BBService.END != DateTime.MinValue)
                    {
                        <h4 class="col">@((BBService.END - BBService.START).TotalSeconds)s</h4>
                    }
                    <h4 class="col"></h4>
                </div>
            </div>
        }
    </div>

</div>



@code {
    [Parameter]
    public long GameID { get; set; } = 0;

    bool startFight = false;
    bool bestPosition = false;
    Player _player;
    Player _opp;
    bool isDSTMap = false;
    RefreshBB _refreshBB;

    ILibData _libstore = LibData.Instance;


    decimal? builds = 100;
    decimal? positions = 200;
    decimal? cores = Environment.ProcessorCount;

    bool ShowHideOpp_bool = true;
    bool doUpdateBB = false;

    private IEnumerable<string> RacesAvailable1 = new string[]
    {
        "Protoss",
        "Terran",
        "Zerg"
                    };
    private IEnumerable<string> RacesAvailable2 = new string[]
    {
        "Protoss",
        "Terran",
        "Zerg"
                    };


    protected override void OnInitialized()
    {
        if (GameID == 0)
        {
            _player = new Player();
            _player.Name = "BBPlayer#1";
            _player.Pos = 1;
            _player.ID = paxgame.GetPlayerID();
            _player.Race = UnitRace.Terran;
            _player.inGame = true;
            _player.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == _player.Race));
            _player.MineralsCurrent = 10000;

            _opp = new Player();
            _opp.Name = "BBPlayer#2";
            _opp.Pos = 4;
            _opp.ID = paxgame.GetPlayerID();
            _opp.Race = UnitRace.Zerg;
            _opp.inGame = true;
            _opp.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == _opp.Race));

            _libstore.SetPlayer(_player);
            _libstore.SetPlayer(_opp);

            _player.Game = new GameHistory();
            _player.Game.ID = paxgame.GetGameID();
            _player.Game.Players.Add(_player);
            _player.Game.Players.Add(_opp);

            _opp.Game = _player.Game;

            _player.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == _player.Race && x.Cost > 0));
            _opp.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == _opp.Race && x.Cost > 0));

            _libstore.SetGame(_player.Game);
        }
        else
        {
            GameHistory game = _libstore.GetGame((ulong)GameID);
            _player = game.Players.SingleOrDefault(x => x.Pos == 1);
            _opp = game.Players.SingleOrDefault(x => x.Pos == 4);
        }

        _refreshBB = new RefreshBB();

        _refresh.PropertyChanged += Update;
        _refreshBB.PropertyChanged += UpdateBB;

    }

    void ChangePlayerRace(ChangeEventArgs e)
    {
        UnitRace race = UnitRace.Terran;
        string value = (string)e.Value;
        if (value == "Protoss")
            race = UnitRace.Protoss;
        else if (value == "Zerg")
            race = UnitRace.Zerg;

        _player.Upgrades = new List<UnitUpgrade>();
        _player.AbilityUpgrades = new List<UnitAbility>();
        _player.MineralsCurrent = 10000;

        _player.Race = race;
        _player.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == race && x.Cost > 0));


        StateHasChanged();
        _refresh.Update = !_refresh.Update;
    }

    void ChangeOppRace(ChangeEventArgs e)
    {
        UnitRace race = UnitRace.Terran;
        string value = (string)e.Value;
        if (value == "Protoss")
            race = UnitRace.Protoss;
        else if (value == "Zerg")
            race = UnitRace.Zerg;

        _opp.Upgrades = new List<UnitUpgrade>();
        _opp.AbilityUpgrades = new List<UnitAbility>();
        _opp.MineralsCurrent = 10000;

        _opp.Race = race;
        _opp.Units = new List<Unit>(UnitPool.Units.Where(x => x.Race == race && x.Cost > 0));

        StateHasChanged();
        _refresh.Update = !_refresh.Update;
    }


    async Task Swap()
    {
        string pl = _player.GetString();
        string opp = _opp.GetString();
        _player.SetString(opp);
        _opp.SetString(pl);

        _player.MineralsCurrent = 10000;
        _opp.MineralsCurrent = 10000;
        _refresh.Update = !_refresh.Update;
        StateHasChanged();
    }

    async Task GenBestBuildPossible()
    {
        _player.Stats = new Dictionary<int, paxgamelib.Models.M_stats>();
        _opp.SoftReset();

        Player temp = new Player();
        temp.Game = new GameHistory();
        temp.SetBuild(_player.GetBuild());
        _opp.MineralsCurrent = temp.MineralsCurrent;

        //_player.Game = new GameHistory();
        //_player.Game.Players.Add(_player);
        //_player.Game.Players.Add(_opp);
        //_opp.Game = _player.Game;

        Task.Run(async () =>
        {
            await BBService.GetBestBuild(_player, _opp, _refreshBB, (int)builds, (int)positions, (int)cores);
        });
        StateHasChanged();
    }

    async Task GenBestPositionPossible()
    {
        _player.Stats = new Dictionary<int, paxgamelib.Models.M_stats>();
        _opp.Stats = new Dictionary<int, paxgamelib.Models.M_stats>();
        Task.Run(async () =>
        {
            await BBService.GetBestPosition(_player, _opp, _refreshBB, (int)builds, (int)positions, (int)cores);
        });
        StateHasChanged();
    }

    async Task StartFight()
    {
        ConcurrentDictionary<int, AddUnit> addunits;
        addunits = await GameService.GenFight(_player.Game);
        _player.Game.Units = new List<Unit>(_player.Game.battlefield.Units);
        _player.Game.Style = await GameService.GenStyle(_player.Game, addunits);
        //_player.Game.Units.AddRange(temp);

        _nav.NavigateTo("gamefight/" + _player.ID.ToString());
        await paxgamelib.Service.StatsService.GenRoundStats(_player.Game);
    }

    public void Update(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    public void UpdateBB(object sender, PropertyChangedEventArgs e)
    {
        if (e != null && e.PropertyName == "BestBuild")
        {
            doUpdateBB = true;
        }
        else
        {
            if (doUpdateBB == true && _refreshBB.BestBuild != null)
            {
                lock (_refreshBB)
                    _opp.SetString(_refreshBB.BestBuild);
                doUpdateBB = false;
                _refresh.Update = !_refresh.Update;
            }
            else
            {
                InvokeAsync(() => StateHasChanged());
            }
        }

    }

    public void Dispose()
    {
        _refresh.PropertyChanged -= Update;
        _refreshBB.PropertyChanged -= UpdateBB;
    }
}

