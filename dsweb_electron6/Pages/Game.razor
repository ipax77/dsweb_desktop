@page "/game"
@using System.Linq
@using System.Globalization
@using System.ComponentModel
@using dsweb_electron6.Models
@using dsweb_electron6.Data
@inject IComponentContext ComponentContext
@inject Interfaces.IDSdata_cache _DSdata
@inject DSdyn_filteroptions  _options
@inject StartUp  _startUp
@implements IDisposable


@if (@replay != null)
{
    @if (@replay.ID != @replayid)
    {
        @NewReplay()
    }
<div class="container-fluid">
    <div class="row">
        <div>
            <div class="row">
                @for (int i = 0; i < 2; i++)
                {
                    <div>
                        <p><b>Team @(i + 1)</b></p>
                        <table class="table table-sm table-dark table-hover box-layout">
                            @SetColor(DSdata.color_plbg_def)
                            @if (replay.WINNER == i)
                            {
                                <tr class="table-success"><th></th><th></th><th>Build</th><th>Commander</th><th>Army</th><th>Kills</th><th>Cash</th><th>DPS</th></tr>
                            }
                            else
                            {
                                <tr class="table-primary"><th></th><th></th><th>Build</th><th>Commander</th><th>Army</th><th>Kills</th><th>Cash</th><th>DPS</th></tr>
                            }
                            @foreach (dsplayer pl in @replay.PLAYERS.Where(x => x.TEAM == i).OrderBy(o => o.REALPOS))
                            {
                                @SetColor(DSdata.color_plbg_def)
                                @SetClass("table-dark");
                                @if (_startUp.Conf.Players.Contains(pl.NAME))
                                {@SetColor(DSdata.color_plbg_player);
                                @SetClass("table-primary");
                            }
                                @if (pl.KILLSUM == replay.MAXKILLSUM)
                                {@SetColor(DSdata.color_plbg_mvp);
                                @SetClass("table-secondary");
                            }
                                <tr class="@myclass table-row" @onclick="@(() => BuildCheck[pl.REALPOS].IsChecked = !BuildCheck[pl.REALPOS].IsChecked)">

                                    <td>Player @pl.REALPOS</td>
                                    <td width="30px"><img alt="img_@pl.RACE" longdesc="img_@pl.RACE" src="@DSdata.GetIcon(@pl.RACE)" width="30" height="30" /></td>

                                    <!--<td><input id="build_@pl.RACE\_@pl.REALPOS" name="build_@pl.RACE" type="checkbox" onchange="@(eventArgs => { ShowBuild(@pl.REALPOS, eventArgs.Value); })" /></td>-->
                                    <td><input id="build_@pl.RACE\_@pl.REALPOS" name="build_@pl.RACE" type="checkbox" checked="@BuildCheck[pl.REALPOS].IsChecked" /></td>
                                    <td>@pl.RACE</td>
                                    <td>@(((double)@pl.ARMY / 1000).ToString("N", CultureInfo.CreateSpecificCulture("en-US")))k</td>
                                    <td>@(((double)@pl.KILLSUM / 1000).ToString("N", CultureInfo.CreateSpecificCulture("en-US")))k</td>
                                    <td>@(((double)@pl.INCOME / 1000).ToString("N", CultureInfo.CreateSpecificCulture("en-US")))k</td>
                                    <td>@pl.GetDPV().ToString("0.00")</td>
                                </tr>
                            }

                        </table>
                    </div>
                }
            </div>
            <div class="row">
                <div class="custom-control custom-radio mr-2">
                    <label class="label label-default">
                        <input type="radio"
                               name="BP"
                               id="rb_5min"
                               @onchange="@(() => { ChangeBuild(1); })" />
                        5min
                    </label>
                </div>
                <div class="custom-control custom-radio mr-2">
                    <label class="label label-default">
                        <input type="radio"
                               name="BP"
                               id="rb_10min"
                               checked="checked"
                               @onchange="@(() => { ChangeBuild(2); })" />
                        10min
                    </label>
                </div>
                <div class="custom-control custom-radio mr-2">
                    <label class="label label-default">
                        <input type="radio"
                               name="BP"
                               id="rb_15min"
                               @onchange="@(() => { ChangeBuild(3); })" />
                        15min
                    </label>
                </div>
                <div class="custom-control custom-radio mr-2">
                    <label class="label label-default">
                        <input type="radio"
                               name="BP"
                               checked="checked"
                               id="rb_all"
                               @onchange="@(() => { ChangeBuild(4); })" />
                        all
                    </label>
                </div>
            </div>
            <div class="container-fluid row buildminheight no-gutters">
                <div class="d-flex">
                    @foreach (string ent in BUILDS.Keys)
                    {
                        <div>
                            <p><b>Build @ent</b></p>
                            <table class="table table-sm table-dark box-layout">
                                <thead>
                                    <tr><th>Unit</th><th>Count</th></tr>
                                </thead>

                                @if (SPECIAL.ContainsKey(ent))
                                {
                                    <tr>
                                        <td>
                                            <span class="badge badge-danger">
                                                @foreach (var sp in SPECIAL[ent])
                                                {
                                                    <span class="badge badge-danger">
                                                        @sp.Key:  @sp.Value
                                                    </span>
                                                }
                                            </span>
                                        </td>
                                    </tr>
                                }

                                @foreach (var kent in BUILDS[ent].OrderByDescending(o => o.Value))
                                {
                                    <tr><td>@kent.Key</td><td>@kent.Value</td></tr>
                                }
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div>
            <div class="row ml-5">
                <div>
                    <div>
                        <p><b>Game Info</b></p>
                        <table class="table table-sm table-dark box-layout">
                            <tr><td>ID:</td><td>@replay.ID</td></tr>
                            <tr><td>Duration:</td><td>@replay.GetDuration() min</td></tr>
                            <tr><td>Winner:</td><td>Team @(@replay.WINNER + 1)</td></tr>
                            @try
                            {
                                <tr><td>Player:</td><td>@replay.PLAYERS.Where(x => _startUp.Conf.Players.Contains(x.NAME)).ToList().ElementAt(0).REALPOS</td></tr>
                            }
                            catch { }
                            <tr><td>MVP:</td><td>@replay.PLAYERS.Where(x => x.KILLSUM == replay.MAXKILLSUM).ToList().ElementAt(0).REALPOS</td></tr>
                            <tr><td>Gametime:</td><td>@replay.GAMETIME.ToString().Substring(0, 8)</td></tr>
                        </table>
                    </div>
                </div>

                <div>
                    <p><b>Summary</b></p>
                    <table class="table table-sm box-layout">
                        @SetColor(DSdata.color_plbg_def)
                        <tr class="table-primary"><th>Team 1</th><th></th><th>Team 2</th></tr>
                        <tr class="table-primary" style="line-height: 10px; "><th></th><th><font size="1">Army</font></th><th></th></tr>
                        @SetDiffColor(DSdata.color_null)
                        @if (@replay.GetArmyDiff().StartsWith("-"))
                        {
                            @SetDiffColor(DSdata.color_diff1)
                        }
                        else
                        {
                            @SetDiffColor(DSdata.color_diff2)
                        }
                        <tr class="table-primary"><td>@replay.GetArmy(0).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td><td><font color="@pldiffcolor">@replay.GetArmyDiff()</font></td><td>@replay.GetArmy(1).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td></tr>
                        <tr class="table-primary" style="line-height: 10px; "><th></th><th><font size="1">Kills</font></th><th></th></tr>
                        @SetDiffColor(DSdata.color_null)
                        @if (@replay.GetKilledDiff().StartsWith("-"))
                        {
                            @SetDiffColor(DSdata.color_diff1)
                        }
                        else
                        {
                            @SetDiffColor(DSdata.color_diff2)
                        }
                        <tr class="table-primary"><td>@replay.GetKilled(0).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td><td><font color="@pldiffcolor">@replay.GetKilledDiff()</font></td><td>@replay.GetKilled(1).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td></tr>
                        <tr class="table-primary" style="line-height: 10px; "><th></th><th><font size="1">Income</font></th><th></th></tr>
                        @SetDiffColor(DSdata.color_null)
                        @if (@replay.GetIncomeDiff().StartsWith("-"))
                        {
                            @SetDiffColor(DSdata.color_diff1)
                        }
                        else
                        {
                            @SetDiffColor(DSdata.color_diff2)
                        }
                        <tr class="table-primary"><td>@replay.GetIncome(0).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td><td><font color="@pldiffcolor">@replay.GetIncomeDiff()</font></td><td>@replay.GetIncome(1).ToString("N", CultureInfo.CreateSpecificCulture("en-US"))k</td></tr>
                        <tr class="table-primary" style="line-height: 10px; "><th></th><th><font size="1">Middle</font></th><th></th></tr>
                        @if (replay.WINNER == 0)
                        {
                    <tr class="table-primary">
                        <td>@Math.Round((double)replay.MIDTEAMWINNER / (double)replay.DURATION * 100, 2) %</td>
                        <td>&lt;=&gt;</td>
                        <td>@Math.Round((double)replay.MIDTEAMSECOND / (double)replay.DURATION * 100, 2) %</td>
                    </tr>
                        }
                        else
                        {
                            <tr class="table-primary"><td>@Math.Round((double)replay.MIDTEAMSECOND / (double)replay.DURATION * 100, 2) %</td>
                            <td>&lt;=&gt;</td>
                            <td>@Math.Round((double)replay.MIDTEAMWINNER / (double)replay.DURATION * 100, 2) %</td></tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
}

@code {

[Parameter]
private dsreplay replay { get; set; }

DSdyn_BuildChecked[] BuildCheck { get; set; }
//int gameid { get; set; } = 0;
int BreakPoint = 4;
int currentCount = 2;
string myclass = "table-primary";
string Special = "";

string plbgcolor = DSdata.color_plbg_def;
string pldiffcolor = DSdata.color_null;
Dictionary<string, IEnumerable<KeyValuePair<string, int>>> BUILDS;
Dictionary<string, IEnumerable<KeyValuePair<string, double>>> SPECIAL = new Dictionary<string, IEnumerable<KeyValuePair<string, double>>>();
Dictionary<int, Dictionary<string, List<KeyValuePair<string, int>>>> BUILDS_CACHE = new Dictionary<int, Dictionary<string, List<KeyValuePair<string, int>>>>();
int replayid = 0;

int MIN5 = 6720;
int MIN10 = 13440;
int MIN15 = 20160;

object NewReplay()
{
    replayid = replay.ID;
    ShowBuildHandler(new DSdyn_BuildChecked(true), null);
    foreach (var ent in BuildCheck)
    {
        ent.IsChecked = false;
    }

    dsplayer pl = new dsplayer();
    try
    {
        pl = replay.PLAYERS.Where(x => _startUp.Conf.Players.Contains(x.NAME)).ElementAt(0);
    }
    catch { }
    if (pl != null)
    {
        BuildCheck[pl.REALPOS].IsChecked = true;
        BuildCheck[replay.GetOpp(pl.REALPOS).REALPOS].IsChecked = true;
    }
    return null;
}

protected override void OnInit()
{
    CultureInfo.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
    BUILDS = new Dictionary<string, IEnumerable<KeyValuePair<string, int>>>();
    BuildCheck = new DSdyn_BuildChecked[]
    {
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked(),
                new DSdyn_BuildChecked()
                };
    foreach (var ent in BuildCheck)
    {
        ent.PropertyChanged += ShowBuildHandler;
    }

}

protected override async Task OnAfterRenderAsync()
{
    // TEMPORARY: Currently we need this guard to avoid making the interop
    // call during prerendering. Soon this will be unnecessary because we
    // will change OnAfterRenderAsync so that it won't run during the
    // prerendering phase.
    if (!ComponentContext.IsConnected)
    {
        return;
    }


}

object SetColor(string mycolor)
{
    plbgcolor = mycolor;
    return null;
}
object SetClass(string mycolor)
{
    myclass = mycolor;
    return null;
}

object SetDiffColor(string mycolor)
{
    pldiffcolor = mycolor;
    return null;
}

void GameClose()
{
    replay = null;
    for (int i = 0; i < BuildCheck.Length; i++)
    {
        BuildCheck[i].IsChecked = false;
    }
    BUILDS.Clear();
}

void BuildsClose1()
{
    for (int i = 0; i < BuildCheck.Length; i++)
    {
        BuildCheck[i].IsChecked = false;
    }
    BUILDS.Clear();
}

object BuildsClose()
{
    for (int i = 0; i < BuildCheck.Length; i++)
    {
        BuildCheck[i].IsChecked = false;
    }
    BUILDS.Clear();
    return null;
}

public void ChangeRep()
{
    for (int i = 0; i < BuildCheck.Length; i++)
    {
        BuildCheck[i].IsChecked = false;
    }
    BUILDS.Clear();
}

void ChangeBuild(int p)
{
    BreakPoint = p;
    string bp = "ALL";
    if (BreakPoint == 1) { bp = "MIN5"; }
    else if (BreakPoint == 2) { bp = "MIN10"; }
    else if (BreakPoint == 3) { bp = "MIN15"; }
    else if (BreakPoint == 4) { bp = "ALL"; }
    foreach (string ent in BUILDS.Keys.ToArray())
    {
        dsplayer pl = new dsplayer();
        int i = 1;
        if (ent.EndsWith("1")) { i = 1; }
        else if (ent.EndsWith("2")) { i = 2; }
        else if (ent.EndsWith("3")) { i = 3; }
        else if (ent.EndsWith("4")) { i = 4; }
        else if (ent.EndsWith("5")) { i = 5; }
        else if (ent.EndsWith("6")) { i = 6; }

        pl = replay.PLAYERS.Where(x => x.REALPOS == i).ToList().ElementAt(0);

        KeyValuePair<string, double> Gas = new KeyValuePair<string, double>();
        KeyValuePair<string, double> Mid = new KeyValuePair<string, double>();
        KeyValuePair<string, double> Upgrades = new KeyValuePair<string, double>();

        List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
        List<KeyValuePair<string, double>> _special = new List<KeyValuePair<string, double>>();
        foreach (string unit in pl.UNITS[bp].Keys)
        {
            if (unit == "Gas")
            {
                Gas = new KeyValuePair<string, double>(unit, pl.UNITS[bp][unit]);
                _special.Add(Gas);
            }
            else if (unit == "Upgrades")
            {
                Upgrades = new KeyValuePair<string, double>(unit, pl.UNITS[bp][unit]);
                _special.Add(Upgrades);
            }
            else if (unit == "Mid")
            {
                double mid = 0;
                if (pl.UNITS[bp][unit] > 0)
                {
                    if (bp == "MIN5")
                    {
                        mid = (double)pl.UNITS[bp][unit] / (double)MIN5 * 100;
                    } else if (bp == "MIN10")
                    {
                        mid = (double)pl.UNITS[bp][unit] / (double)MIN10 * 100;
                    } else if (bp == "MIN15")
                    {
                        mid = (double)pl.UNITS[bp][unit] / (double)MIN15 * 100;
                    } else if (bp == "ALL")
                    {
                        mid = (double)pl.UNITS[bp][unit] / (double)replay.DURATION * 100;
                    }
                }
                Mid = new KeyValuePair<string, double>(unit, Math.Round(mid, 2));
                _special.Add(Mid);
            }
            else
            {
                temp.Add(new KeyValuePair<string, int>(unit, pl.UNITS[bp][unit]));
            }
        }
        BUILDS[ent] = temp;
        SPECIAL[ent] = _special;
    }
}

void LoadBuild()
{
    if (replay != null)
    {
        BUILDS_CACHE.Clear();
        foreach (dsplayer pl in replay.PLAYERS)
        {
            BUILDS_CACHE.Add(pl.REALPOS, new Dictionary<string, List<KeyValuePair<string, int>>>());
            foreach (string bp in DSdata.s_builds)
            {
                if (pl.UNITS.ContainsKey(bp))
                {
                    BUILDS_CACHE[pl.REALPOS].Add(bp, new List<KeyValuePair<string, int>>());
                    List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
                    foreach (string unit in pl.UNITS[bp].Keys)
                    {
                        temp.Add(new KeyValuePair<string, int>(unit, pl.UNITS[bp][unit]));
                    }
                    BUILDS_CACHE[pl.REALPOS][bp] = temp;
                }
                else
                {
                    List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
                    temp.Add(new KeyValuePair<string, int>("No data.", 0));
                    BUILDS_CACHE[pl.REALPOS].Add(bp, temp);
                }
            }
        }
    }
}


void ShowBuildHandler(object sender, PropertyChangedEventArgs e)
{
    BUILDS.Clear();
    SPECIAL.Clear();
    if (replay != null)
    {
        int j = 0;
        int i = 1;
        foreach (var pos in BuildCheck)
        {
            if (pos.IsChecked == true)
            {
                i = j;


                string bp = "ALL";
                if (BreakPoint == 1) { bp = "MIN5"; }
                else if (BreakPoint == 2) { bp = "MIN10"; }
                else if (BreakPoint == 3) { bp = "MIN15"; }
                else if (BreakPoint == 4) { bp = "ALL"; }

                dsplayer pl = null;
                try
                {
                    pl = replay.PLAYERS.Where(x => x.REALPOS == i).ToList().ElementAt(0);
                }
                catch { }
                if (pl != null && pl.UNITS.ContainsKey(bp))
                {
                    if (!BUILDS.ContainsKey("Player" + i))
                    {
                        KeyValuePair<string, double> Gas = new KeyValuePair<string, double>();
                        KeyValuePair<string, double> Mid = new KeyValuePair<string, double>();
                        KeyValuePair<string, double> Upgrades = new KeyValuePair<string, double>();

                        List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
                        List<KeyValuePair<string, double>> _special = new List<KeyValuePair<string, double>>();
                        foreach (string unit in pl.UNITS[bp].Keys)
                        {

                            if (unit == "Gas")
                            {
                                Gas = new KeyValuePair<string, double>(unit, pl.UNITS[bp][unit]);
                                _special.Add(Gas);
                            }
                            else if (unit == "Upgrades")
                            {
                                Upgrades = new KeyValuePair<string, double>(unit, pl.UNITS[bp][unit]);
                                _special.Add(Upgrades);
                            }
                            else if (unit == "Mid")
                            {
                                double mid = 0;
                                if (pl.UNITS[bp][unit] > 0)
                                {
                                    if (bp == "MIN5")
                                    {
                                        mid = (double)pl.UNITS[bp][unit] / (double)MIN5 * 100;
                                    } else if (bp == "MIN10")
                                    {
                                        mid = (double)pl.UNITS[bp][unit] / (double)MIN10 * 100;
                                    } else if (bp == "MIN15")
                                    {
                                        mid = (double)pl.UNITS[bp][unit] / (double)MIN15 * 100;
                                    } else if (bp == "ALL")
                                    {
                                        mid = (double)pl.UNITS[bp][unit] / (double)replay.DURATION * 100;
                                    }
                                }
                                Mid = new KeyValuePair<string, double>(unit, Math.Round(mid, 2));
                                _special.Add(Mid);
                            }
                            else
                            {
                                temp.Add(new KeyValuePair<string, int>(unit, pl.UNITS[bp][unit]));
                            }
                        }
                        BUILDS.Add("Player" + i, temp);
                        SPECIAL.Add("Player" + i, _special);
                    }
                    else
                    {
                        //BUILDS.Remove("Player" + i);
                    }
                }
            }
            j++;
        }
    }
}

void ShowBuild(int i, object checkedValue)
{
    if (replay != null)
    {
        string bp = "ALL";
        if (BreakPoint == 1) { bp = "MIN5"; }
        else if (BreakPoint == 2) { bp = "MIN10"; }
        else if (BreakPoint == 3) { bp = "MIN15"; }
        else if (BreakPoint == 4) { bp = "ALL"; }

        KeyValuePair<string, double> Gas = new KeyValuePair<string, double>();
        KeyValuePair<string, double> Mid = new KeyValuePair<string, double>();
        KeyValuePair<string, double> Upgrades = new KeyValuePair<string, double>();

        dsplayer pl = replay.PLAYERS.Where(x => x.REALPOS == i).ToList().ElementAt(0);
        if (pl.UNITS.ContainsKey(bp))
        {
            if (!BUILDS.ContainsKey("Player" + i))
            {
                List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
                foreach (string unit in pl.UNITS[bp].Keys)
                {
                    if (unit == "Gas" || unit == "Upgrades" || unit == "Mid")
                    {

                    }
                    else
                    {
                        temp.Add(new KeyValuePair<string, int>(unit, pl.UNITS[bp][unit]));
                    }
                }
                BUILDS.Add("Player" + i, temp);
            }
            else
            {
                BUILDS.Remove("Player" + i);
            }
        }
        else
        {
            List<KeyValuePair<string, int>> temp = new List<KeyValuePair<string, int>>();
            temp.Add(new KeyValuePair<string, int>("No Build available", 0));
            BUILDS.Add("Player" + i, temp);
        }
    }
}

void IncrementCount()
{
    currentCount++;
}

public void Dispose()
{
    foreach (var ent in BuildCheck)
    {
        ent.PropertyChanged -= ShowBuildHandler;
    }
}

}
